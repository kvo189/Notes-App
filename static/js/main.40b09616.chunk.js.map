{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Note","props","handleChange","evt","setState","html","target","value","state","saved","edit","handleSave","bind","handleFocus","handleEdit","textArea","React","createRef","this","onSave","id","focus","className","date","disabled","onClick","onDelete","e","onChange","onBlur","onFocus","placeholder","minRows","ref","tag","source","Component","App","notes","defaultNote","handleCreateNote","handleDelete","ls","get","now","moment","format","prevState","Date","getTime","concat","noteID","filter","note","set","noteValue","noteIndex","findIndex","map","key","style","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.40b09616.chunk.js","sourcesContent":["import React from 'react';\nimport moment from 'moment'; \nimport TextareaAutosize from 'react-textarea-autosize';\nimport ls from 'local-storage';\nimport ReactMarkdown from \"react-markdown/with-html\";\nimport './App.css';\n\nclass Note extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      html: this.props.value,\n      saved: true,\n      edit: false,\n    };\n    this.handleSave = this.handleSave.bind(this);\n    this.handleFocus = this.handleFocus.bind(this);\n    this.handleEdit = this.handleEdit.bind(this);\n    this.textArea = React.createRef();\n  }\n\n  handleChange = evt => {\n    this.setState({ html: evt.target.value });\n  };\n\n  handleFocus() {\n    this.setState({saved: false});\n  }\n\n  handleSave() {\n    this.props.onSave(this.props.id, this.state.html);\n    this.setState({saved: true, edit: false});\n  }\n\n  handleEdit() {\n    if (this.state.edit) return;\n    this.setState({\n      edit: true\n    }, () => {\n      this.textArea.focus();\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"Note\">\n        <div className=\"note-header\">\n          <span className=\"date\">{this.props.date}</span>\n          <div>\n            <span className=\"note-btn\" disabled>{this.state.saved ? 'Saved' : 'Editing...'}</span>\n            <button className=\"note-btn\" onClick={() => this.props.onDelete(this.props.id)}>Delete</button>\n          </div>\n        </div>\n\n        <div className =\"text-input\" onClick={e => this.handleEdit()}>\n          {this.state.edit ? \n            <TextareaAutosize className=\"textArea\"\n            value={this.state.html}\n            onChange={this.handleChange}\n            onBlur={this.handleSave}\n            onFocus={this.handleFocus}\n            placeholder=\"Enter your note here...\"\n            minRows={5}\n            ref={(tag) => (this.textArea = tag)}   \n            />\n          :\n            <ReactMarkdown className=\"ReactMarkdown\" source={this.state.html}/> \n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {  \n    super(props);  \n    this.state = {\n      notes: [defaultNote],\n    };\n    this.handleCreateNote = this.handleCreateNote.bind(this);  \n    this.handleDelete = this.handleDelete.bind(this);\n    this.handleSave = this.handleSave.bind(this);\n  }  \n\n  componentDidMount() {\n    this.setState({\n      notes: ls.get('notes') || [defaultNote]\n    });\n  }\n  \n  handleCreateNote() {\n    var now = moment().format('dddd MMMM Do YYYY, h:mm:ss a');\n    this.setState(prevState => ({\n      notes: [{date: now, value:\"\", id: new Date().getTime()}].concat(prevState.notes)\n    }));\n  }\n\n  handleDelete (noteID) {\n    const notes = this.state.notes.filter(note => note.id !== noteID);\n    this.setState({notes: notes});\n    ls.set('notes', notes);\n  }\n\n  handleSave (noteID, noteValue) {\n    const noteIndex = this.state.notes.findIndex(note => note.id === noteID ),\n          notes = [...this.state.notes];\n    notes[noteIndex] = {...notes[noteIndex], value: noteValue};\n    this.setState({notes: notes});\n    ls.set('notes', notes);\n  }\n\n  render() {\n    var notes = this.state.notes.map(note => (\n      <Note key={note.id} id={note.id} date={note.date} value={note.value} onDelete={this.handleDelete} onSave={this.handleSave}/>\n    ));\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          React Markdown Notes Taking App\n        </header>\n  \n        <button onClick={this.handleCreateNote} style={{marginTop: \"10px\"}}>\n          Create Note\n        </button>\n        \n        <div className=\"notes-container\">\n          {notes}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\nvar defaultNote = {\n  id: new Date().getTime(),\n  date: \"Wednesday July 1st 2020, 4:41:50 pm\",\n  value: \"# Hello, World!\\n\\nThis is your first React Markdown note. You can:\\n\\n* Click/Focus to edit\\n\\n* Click off/Blur to save\\n\\n* Add a new note  by clicking the 'Create Note' button above.\\n\\n* Delete this note\\n\\n* Save created notes in local data storage\\n\\nMarkdown compiled using [react-markdown](https://github.com/rexxars/react-markdown).\"\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}